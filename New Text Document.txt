9 1 3 4 2 5 7 8 6
8 1 2 9 3 4 7 6 5
7 2 4 6 9 5 8 3 1
2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 8 2 9 4 3 7 6 5
13 2 10 3 1 12 8 4 5 16 9 6 15 14 11 7
6 13 7 10 8 9 11 16 15 2 12 5 14 3 1 4
14 8 12 1 9 6 4 3 7 2 5 11 10 16 13 15
5 10 14 7 8 3 6 1 15 16 12 9 2 11 4 13


int g=0;
        Node finalNode=new Node();
        int optimal_cost=0;
        while (open.size()!=0){
            int min = 99999999;
            for(int i=0;i<open.size();i++){
                if(open.get(i).getDepth()!=g)
                    continue;
                if(open.get(i).getPathcost()<=min){
                    min = open.get(i).getPathcost();
                }
            }
            //finding the states with minimum pathcost and adding then into closed arraylist
            for(int i=0;i<open.size();i++){
                if(open.get(i).getDepth()!=g)
                    continue;
                if(open.get(i).getPathcost()==min){
                    closed.add(open.get(i));
                    if(compareBoard(open.get(i).getState(),goal,k)){  //if goal state found then return success
                        System.out.println("Goal State Reached ");
                        System.out.println("Number of Explored Nodes: "+open.size()+closed.size());
                        System.out.println("Number of Expanded Nodes: "+closed.size());
                        finalNode = open.get(i);
                        optimal_cost = open.get(i).getPathcost();
                        ArrayList<Node> Print = new ArrayList<>(1000);
                        while (finalNode.getParent()!=null){
                            Print.add(finalNode);
                            finalNode = finalNode.getParent();
                        }
                        Print.add(newNode);
                        for(int l=Print.size()-1;l>=0;l--){
                            System.out.println("Step-"+(Print.size()-l));
                            printBoard(Print.get(l).getState(),k);
                        }
                        return optimal_cost;
                    }
                    open.remove(i);
                }
            }
            //expanding the boards in closed arraylist
            for(int i=0;i<closed.size();i++){
                if(closed.get(i).getDepth()!=g)
                    continue;
                shuffled = shuffle(closed.get(i),k,choice);
                // if goal state is not found yet then adding the uncommon shuffled boards into open arraylist
                for(int j=0;j<shuffled.size();j++){
                    if(open.size()==0){
                        for(int l=0;l<shuffled.size();l++){
                            open.add(shuffled.get(l));
                        }
                        break;
                    }
                    else{
                        boolean conf = true;
                        for(int l=0;l<closed.size();l++){
                            if(compareBoard(shuffled.get(j).getState(),closed.get(l).getState(),k)){
                                conf = false;
                                break;
                            }
                        }
                        if(conf){
                            open.add(shuffled.get(j));
                        }
                    }
                }
            }
            g++;
        }




for(int i=0;i<open.size();i++){
                int min = 9999;
                for(int j=0;j<open.size();j++){
                    if(min>=open.get(j).getPathcost()){
                        min = open.get(j).getPathcost();
                    }
                }
                if(open.get(i).getPathcost()==min){
                    closed.add(open.get(i));
                    Node node = open.get(i);
                    open.remove(i);
                    if(compareBoard(node.getState(),goal,k)){
                        System.out.println("Goal state reached");
                        int ex = open.size()+closed.size();
                        System.out.println("Explored nodes: "+ex);
                        System.out.println("Expanded nodes: "+closed.size());
                        optimal_cost = node.getPathcost();
                        ArrayList<Node> Print = new ArrayList<>(1000);
                        while (node.getParent()!=null){
                            Print.add(node);
                            node = node.getParent();
                        }
                        Print.add(newNode);
                        for(int l=Print.size()-1;l>=0;l--){
                            System.out.println("Step-"+(Print.size()-l));
                            printBoard(Print.get(l).getState(),k);
                        }
                        return optimal_cost;
                    }
                    shuffled = shuffle(node,k,choice);
                    for(int j=0;j<shuffled.size();j++){
                        int l;
                        for(l=0;l<closed.size();l++){
                            if(compareBoard(shuffled.get(j).getState(),closed.get(l).getState(),k)){
                                break;
                            }
                        }
                        if(l==closed.size()){
                            open.add(shuffled.get(j));
                        }
                    }
                }
            }